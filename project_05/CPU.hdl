// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    // Write JUMP Statements
    // zrOutput Is aluOutput zero?
    // ngOutput Is aluOutput less than zero?
    // 
    // Instruction[2]: Less Than zero
    // Instruction[1]: Equals zero
    // Instruction[0]: Greater Than zero
    PC(in[0..14]=aRegisterResult, reset=reset, load=isLoad, inc=true, out[0..14]=pc);

    // Less than zero
    And(a=instruction[2], b=ngOutput, out=lessThanZero);

    // Equals zero
    And(a=instruction[1], b=zrOutput, out=equalsZero);

    // Greater than zero
    Or(a=ngOutput, b=zrOutput, out=lessThanZeroOrEqualsToZeroOutput);
    Not(in=lessThanZeroOrEqualsToZeroOutput, out=greaterThanZeroOutput);
    And(a=instruction[0], b=greaterThanZeroOutput, out=greaterThanZero);

    Or(a=lessThanZero, b=equalsZero, out=lessThanZeroOrEqualsToZero);
    Or(a=lessThanZeroOrEqualsToZero, b=greaterThanZero, out=allConditions);
    And(a=instruction[15], b=allConditions, out=isLoad);

    // Mux for A Register    
    Mux16(
        a[15]=false,
        a[0..14]=instruction[0..14],
        b=aluOutput,
        sel=instruction[15],
        out[0..14]=newIntructionOrALUResult
    );

    // A Register
    Not(in=instruction[15], out=loadARegisterIfAddress);
    Or(a=loadARegisterIfAddress, b=instruction[05], out=loadARegister);        
    ARegister(
        in[15]=false,
        in[0..14]=newIntructionOrALUResult,
        load=loadARegister,
        out[0..14]=aRegisterResult,
        out[0..14]=addressM
    );

    // 0 is to the right
    // 15 is to the left
    And(a=instruction[3], b=instruction[15], out=writeM, out=writeToMRegsiterLoad);
    Register(in=aluOutput, load=writeToMRegsiterLoad, out=mRegsterResult);

    Mux16(
        a[15]=false, 
        a[0..14]=aRegisterResult, 
        b=inM,        
        sel=instruction[12], 
        out=aOrMResult
    );

    // D Register
    And(a=instruction[15], b=instruction[4], out=loadDRegister);
    DRegister(in=aluOutput, load=loadDRegister, out=dRegisterResult);

    ALU(
        x=dRegisterResult, 
        y=aOrMResult, 
        zx= instruction[11], 
        nx= instruction[10],
        zy= instruction[9],
        ny= instruction[8],
        f=  instruction[7],
        no= instruction[6],
        out=aluOutput,
        out=outM,
        zr=zrOutput,
        ng=ngOutput
    );
}