// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/1/Mux4Way16.hdl
/**
 * 4-way 16-bit multiplexor:
 * out = a if sel = 00
 *       b if sel = 01
 *       c if sel = 10
 *       d if sel = 11
 */
CHIP Mux4Way16 {
    IN a[16], b[16], c[16], d[16], sel[2];
    OUT out[16];

    PARTS:
    // Second bit is False
    Mux16(a=a, b=b, sel=sel[0], out=firstResult);

    // Second bit is True
    Mux16(a=c, b=d, sel=sel[0], out=secondResult);

    Mux16(a=firstResult, b=secondResult, sel=sel[1], out=out);
    /*
    Mux(a=a[0], b=b[0], sel=sel[0], out=resultAOrB0);
    Mux(a=c[0], b=d[0], sel=sel[0], out=resultCOrD0);

    Mux(a=resultAOrB0, b=resultCOrD0, sel=sel[1], out=out[0]);

    Mux(a=a[1], b=b[1], sel=sel[0], out=resultAOrB1);
    Mux(a=c[1], b=d[1], sel=sel[0], out=resultCOrD1);

    Mux(a=resultAOrB1, b=resultCOrD1, sel=sel[1], out=out[1]);

    Mux(a=a[2], b=b[2], sel=sel[0], out=resultAOrB2);
    Mux(a=c[2], b=d[2], sel=sel[0], out=resultCOrD2);

    Mux(a=resultAOrB2, b=resultCOrD2, sel=sel[1], out=out[2]);

    Mux(a=a[3], b=b[3], sel=sel[0], out=resultAOrB3);
    Mux(a=c[3], b=d[3], sel=sel[0], out=resultCOrD3);

    Mux(a=resultAOrB3, b=resultCOrD3, sel=sel[1], out=out[3]);

    Mux(a=a[4], b=b[4], sel=sel[0], out=resultAOrB4);
    Mux(a=c[4], b=d[4], sel=sel[0], out=resultCOrD4);

    Mux(a=resultAOrB4, b=resultCOrD4, sel=sel[1], out=out[4]);

    Mux(a=a[5], b=b[5], sel=sel[0], out=resultAOrB5);
    Mux(a=c[5], b=d[5], sel=sel[0], out=resultCOrD5);

    Mux(a=resultAOrB5, b=resultCOrD5, sel=sel[1], out=out[5]);

    Mux(a=a[6], b=b[6], sel=sel[0], out=resultAOrB6);
    Mux(a=c[6], b=d[6], sel=sel[0], out=resultCOrD6);

    Mux(a=resultAOrB6, b=resultCOrD6, sel=sel[1], out=out[6]);

    Mux(a=a[7], b=b[7], sel=sel[0], out=resultAOrB7);
    Mux(a=c[7], b=d[7], sel=sel[0], out=resultCOrD7);

    Mux(a=resultAOrB7, b=resultCOrD7, sel=sel[1], out=out[7]);

    Mux(a=a[8], b=b[8], sel=sel[0], out=resultAOrB8);
    Mux(a=c[8], b=d[8], sel=sel[0], out=resultCOrD8);

    Mux(a=resultAOrB8, b=resultCOrD8, sel=sel[1], out=out[8]);

    Mux(a=a[9], b=b[9], sel=sel[0], out=resultAOrB9);
    Mux(a=c[9], b=d[9], sel=sel[0], out=resultCOrD9);

    Mux(a=resultAOrB9, b=resultCOrD9, sel=sel[1], out=out[9]);

    Mux(a=a[10], b=b[10], sel=sel[0], out=resultAOrB10);
    Mux(a=c[10], b=d[10], sel=sel[0], out=resultCOrD10);

    Mux(a=resultAOrB10, b=resultCOrD10, sel=sel[1], out=out[10]);

    Mux(a=a[11], b=b[11], sel=sel[0], out=resultAOrB11);
    Mux(a=c[11], b=d[11], sel=sel[0], out=resultCOrD11);

    Mux(a=resultAOrB11, b=resultCOrD11, sel=sel[1], out=out[11]);

    Mux(a=a[12], b=b[12], sel=sel[0], out=resultAOrB12);
    Mux(a=c[12], b=d[12], sel=sel[0], out=resultCOrD12);

    Mux(a=resultAOrB12, b=resultCOrD12, sel=sel[1], out=out[12]);

    Mux(a=a[13], b=b[13], sel=sel[0], out=resultAOrB13);
    Mux(a=c[13], b=d[13], sel=sel[0], out=resultCOrD13);

    Mux(a=resultAOrB13, b=resultCOrD13, sel=sel[1], out=out[13]);

    Mux(a=a[14], b=b[14], sel=sel[0], out=resultAOrB14);
    Mux(a=c[14], b=d[14], sel=sel[0], out=resultCOrD14);

    Mux(a=resultAOrB14, b=resultCOrD14, sel=sel[1], out=out[14]);

    Mux(a=a[15], b=b[15], sel=sel[0], out=resultAOrB15);
    Mux(a=c[15], b=d[15], sel=sel[0], out=resultCOrD15);

    Mux(a=resultAOrB15, b=resultCOrD15, sel=sel[1], out=out[15]);
    */
}